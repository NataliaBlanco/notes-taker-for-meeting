{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\nlet isListening = false;\nlet isPaused = false;\nlet pauseTimeout;\nconst pa = document.querySelector('.js-container');\nconst buttonReset = document.querySelector('.btn-cntr_reset');\nconst buttonStart = document.querySelector('.btn-cntr_record');\nconst buttonStop = document.querySelector('.btn-cntr_stop');\n\nwindow.SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\n\nlet recognition = new SpeechRecognition();\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\nrecognition.lang = 'es';\n\nfunction resetfn(e) {\n  e.preventDefault();\n  pa.innerHTML = '';\n  return pa;\n}\n\nfunction textParagraph(transcript) {\n  let newp = `<p class=\"paragraph\">${transcript}</p>`;\n  pa.innerHTML += newp;\n}\n\n//events\n\nfunction notesTranscription() {\n  recognition.onend = () => {\n    if (isListening) {\n      recognition.start();\n    }\n  };\n  recognition.start();\n}\n\nbuttonReset.addEventListener('click', resetfn);\nbuttonStart.addEventListener('click', () => {\n  if (!isListening) {\n    isListening = true;\n    notesTranscription();\n    recognition.addEventListener('result', (e) => {\n      const transcript = Array.from(e.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join('');\n      if (e.results[0].isFinal) {\n        textParagraph(transcript);\n        isPaused = false;\n      } else {\n        if (!isPaused) {\n          clearTimeout(pauseTimeout);\n          pauseTimeout = setTimeout(() => {\n            isPaused = true;\n          }, 1500);\n        }\n      }\n    });\n  }\n});\nbuttonStop.addEventListener('click', () => {\n  if (isListening) {\n    isListening = false;\n    clearTimeout(pauseTimeout);\n    recognition.stop();\n  }\n});\n\n//recognition.start();\n//recognition.addEventListener('end', recognition.start);\n\n// Habría que añadir un botón para empezar el evento, y otro con el que terminarlo , en el que te diera la opción de guardarlo en el LS\n//\n\n//function addTitle() {}\n\n// function keepLs(listName, value) {\n//   let val = localStorage[listName] ? JSON.parse(localStorage[listName]) : [];\n//   val.push(value.toString());\n//   localStorage.setItem('meeting notes', JSON.stringify(ls));\n// }\n"]}