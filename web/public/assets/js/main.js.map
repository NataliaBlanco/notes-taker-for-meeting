{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\n\nlet isListening = false;\nlet recognition;\nconst pa = document.querySelector('.js-container');\nconst buttonReset = document.querySelector('.btn-cntr_reset');\nconst buttonStart = document.querySelector('.btn-cntr_record');\nconst buttonStop = document.querySelector('.btn-cntr_stop');\n\nwindow.SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\n\nfunction resetfn(e) {\n  e.preventDefault();\n  pa.innerHTML = '';\n  return pa;\n}\n\nfunction textParagraph(transcript) {\n  let newp = `<p class=\"paragraph\">${transcript}</p>`;\n  pa.innerHTML += newp;\n}\nfunction startTranscript() {\n  if (!isListening) {\n    isListening = true;\n    recognition.start();\n  }\n}\nfunction stopTranscript() {\n  if (isListening) {\n    isListening = false;\n    recognition.stop();\n  }\n}\n\nbuttonReset.addEventListener('click', resetfn);\n\n//events\nif (SpeechRecognition) {\n  recognition = new SpeechRecognition();\n  recognition.interimResults = true;\n  recognition.lang = 'es';\n  recognition.onresult = (e) => {\n    const transcript = Array.from(e.results)\n      .map((result) => result[0].transcript)\n      .join('');\n    if (e.results[0].isFinal) {\n      textParagraph(transcript);\n    }\n  };\n  recognition.onend = () => {\n    if (isListening) {\n      recognition.start();\n    }\n  };\n  buttonStart.onclick = () => {\n    startTranscript();\n  };\n  buttonStop.onclick = () => {\n    stopTranscript();\n  };\n} else {\n  ('Your browser does not support recognition speech');\n}\n\n// Habría que añadir un botón para empezar el evento, y otro con el que terminarlo , en el que te diera la opción de guardarlo en el LS\n//\n\n//function addTitle() {}\n\n// function keepLs(listName, value) {\n//   let val = localStorage[listName] ? JSON.parse(localStorage[listName]) : [];\n//   val.push(value.toString());\n//   localStorage.setItem('meeting notes', JSON.stringify(ls));\n// }\n"]}